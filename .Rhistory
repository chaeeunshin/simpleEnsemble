X <- Z%*%Q+J%*%mu
dim(X)
X
#Cholesky factorization
Q <- chol(sigma1)
str(chol.res)
chol.res
X2 <- Z%*%Q+J%*%mu
apply(X2,2,mean)
cov(X2)
#Generating Random Variables
x <- rexp(1000, rate=2)
y <- rexp(5000, rate=2)
qqplot(x,y)
abline(0,1,col="red")
x <- rnorm(1000)
y <- rnorm(1000, mean =1)
qqplot(x,y)
abline(0,1,col="red")
#Inverse Transform Method
#Simulate from 10000 X's from Exp(2)
lambda <- 2
n <- 10000
u <- runif(n)
#Inverse Transform Method
#Simulate from 10000 X's from Exp(2)
lambda <- 2
n <- 10000
u <- runif(n)
x <- log(u)/lambda ## generating 10000 exp(2)
x.gold <- rexp(n,2)
qqplot(x,x.gold)
abline(0,1,col="red")
#Generating Random Variables
x <- rexp(1000, rate=2)
y <- rexp(5000, rate=2)
#Inverse Transform Method
#Simulate from 10000 X's from Exp(2)
lambda <- 2
n <- 10000
u <- runif(n)
x <- log(u)/lambda ## generating 10000 exp(2)
x.gold <- rexp(n,2)
qqplot(x,x.gold)
abline(0,1,col="red")
n <- 1000
k <- 0 # counting the number of acceptance
j <- 0 # counting the number of iterations
x <- rep(NA,n)
while(k<n) {
y <- runif(1) # step 1
j <- j+1
u <- runif(1) # step 2
if (u<=y) { # step 3
k <- k+1
x[k] <- y
}
}
j
hist(x)
n <- 10000
k <- 0 # counting the number of acceptance
j <- 0 # counting the number of iterations
x <- rep(NA,n)
while(k<n) {
y <- runif(1) # step 1
j <- j+1
u <- runif(1) # step 2
if (u<=y) { # step 3
k <- k+1
x[k] <- y
}
}
j
hist(x)
n <- 10000
k <- 0
j <- 0
x <- rep(NA,n)
while(k<n) {
y <- runif(1)
j <- j+1
u <- runif(1)
if(u<=4*y*(1-y)) {
k <- k+1
x[k] <- y
}
}
j
hist(x)
n <- 10000
k <- 0
j <- 0
x <- rep(NA,n)
while(k<n) {
y <- runif(1)
j <- j+1
u <- runif(1)
if(u<=4*y*(1-y)) {
k <- k+1
x[k] <- y
}
}
j
hist(x)
x.gold <- rbeta(10000,2,2)
qqplot(x,x.gold)
abline(0,1)
n <- 10000
k <- 0
j <- 0
x <- rep(NA,n)
while(k<n) {
y <- runif(1)
j <- j+1
u <- runif(1)
if(u<=4*y*(1-y)) {
k <- k+1
x[k] <- y
}
}
j
hist(x)
x.gold <- rbeta(10000,2,2)
qqplot(x,x.gold)
abline(0,1,col="red")
while(k<n) {
y <- runif(1)
j <- j+1
u <- runif(1)
if(u<=y*(1-y)) {
k <- k+1
x[k] <- y
}
}
j
hist(x)
n <- 10000
k <- 0
j <- 0
x <- rep(NA,n)
while(k<n) {
y <- runif(1)
j <- j+1
u <- runif(1)
if(u<=y*(1-y)) {
k <- k+1
x[k] <- y
}
}
j
hist(x)
lambda <- 1
x <- rgamma(10000,2,lambda)
y <- rgamma(10000,2,lambda)
v <- x/(x+y)
hist(v)
qqplot(v,x.gold)
lambda <- 1
x <- rgamma(10000,2,lambda)
y <- rgamma(10000,2,lambda)
v <- x/(x+y)
hist(v)
qqplot(v,x.gold)
abline(0,1,col="red")
u1 <- runif(5000)
u2 <- runif(5000)
x1 <- sqrt(-2*log(u1))*cos(2*pi*u2)
x2 <- sqrt(-2*log(u1))*sni(2*pi*u2)
u1 <- runif(5000)
u2 <- runif(5000)
x1 <- sqrt(-2*log(u1))*cos(2*pi*u2)
x2 <- sqrt(-2*log(u1))*sin(2*pi*u2)
x <- c(x1,x2)
hist(x)
qqnorm(x)
abline(0,1,col="red")
n <- 1000
u <- runif(n)
x <- sqrt(2*u)
hist(x)
phi.inv <- function(u) {
t2 <- -2*log(u)
t <- sqrt(t2)
return(t-(2.30753+0.27061*t)/(1+0.99229*t+0.04481*t^2))
}
n <- 10000
u <- runif(n)
hist(u)
x <- phi.inv(u)
hist(x)
phi.inv <- function(u) {
t2 <- -2*log(u)
t <- sqrt(t2)
return(t-(2.30753+0.27061*t)/(1+0.99229*t+0.04481*t^2))
}
n <- 10000
u <- runif(n)
x <- phi.inv(u)
hist(x)
u1 <- runif(1500)
u2 <- runif(1500)
x1 <- sqrt(-2*log(u1))*cos(2*pi*u2)
x2 <- sqrt(-2*log(u2))*sin(2*pi*u2)
x <- c(x1,x2)
W <- apply(matrix(x^2,ncol=3),1,sum)
W.gold <- rchisq(1000,3)
qqplot(W,W.gold)
abline(0,1,col="red")
u1 <- runif(1500)
u2 <- runif(1500)
x1 <- sqrt(-2*log(u1))*cos(2*pi*u2)
x2 <- sqrt(-2*log(u2))*sin(2*pi*u2)
x <- c(x1,x2)
w <- apply(matrix(x^2,ncol=3),1,sum)
w.gold <- rchisq(1000,3)
qqplot(w,w.gold)
abline(0,1,col="red")
K <- sample(1:3,10000,prob=c(0.2,0.5,0.3),replace=TRUE)
x1 <- rep(NA,10000)
for(i in 1:10000) {
if(K[i]==1)
x1[i] <- rnorm(1,0,1)
if(K[i]==2)
x1[i] <- rnorm(1,-1,1)
if(K[i]==3)
x1[i] <- rnorm(1,2,1)
}
x2 <- rep(NA,10000)
x2[K==1] <- rnorm(length(which(K==1)),0,1)
x2[K==2] <- rnorm(length(which(K==2)),-1,1)
x2[K==3] <- rnorm(length(which(K==3)),2,1)
qqplot(x1,x2)
abline(0,1,col="red")
K <- sample(1:3,10000,prob=c(0.2,0.5,0.3),replace=TRUE)
x1 <- rep(NA,10000)
for(i in 1:10000) {
if(K[i]==1)
x1[i] <- rnorm(1,0,1)
if(K[i]==2)
x1[i] <- rnorm(1,-1,1)
if(K[i]==3)
x1[i] <- rnorm(1,2,1)
}
x2 <- rep(NA,10000)
x2[K==1] <- rnorm(length(which(K==1)),0,1)
x2[K==2] <- rnorm(length(which(K==2)),-1,1)
x2[K==3] <- rnorm(length(which(K==3)),2,1)
qqplot(x1,x2)
abline(0,1,col="red")
hist(x1)
hist(x2)
n <- 10000
r <- 10
p <- 0.4
lambda1 <- rgamma(n,r,scale=p/(1-p))
x <- rpois(n,lambda1)
table(x)
#for(i in 1:n)
#x[i] <- rpois(1,lambda1[i])
Sigma1 <- matrix(c(2,1,1,1,2,1,1,1,2), ncol=3)
Sigma1
Sigma1 <- matrix(c(2,1,1,1,2,1,1,1,2), ncol=3)
evD <- eigen(Sigma1,symmetric(TRUE))
Sigma1 <- matrix(c(2,1,1,1,2,1,1,1,2), ncol=3)
evD <- eigen(Sigma1,symmetric=TRUE)
evD
Sigma1 <- matrix(c(2,1,1,1,2,1,1,1,2), ncol=3)
evD <- eigen(Sigma1,symmetric=TRUE)
Delta.mat <- diag(evD$values)
P <- evD$vectors
Q <- P%*%sqrt(Delta.mat)%*%t(P)
Q
n <- 100
d <- 3
Z <- matrix(rnorm(n*d),nrow=n)
J <- matrix(1,nrow=n,ncol=1)
mu <- c(0,0,0)
X <- Z%*%Q+J%*%t(mu)
Sigma1 <- matrix(c(2,1,1,1,2,1,1,1,2), ncol=3)
evD <- eigen(Sigma1,symmetric=TRUE)
Delta.mat <- diag(evD$values)
P <- evD$vectors
Q <- P%*%sqrt(Delta.mat)%*%t(P)
n <- 100
d <- 3
Z <- matrix(rnorm(n*d),nrow=n)
J <- matrix(1,nrow=n,ncol=1)
mu <- c(0,0,0)
X <- Z%*%Q+J%*%t(mu)
dim(X)
Sigma1 <- matrix(c(2,1,1,1,2,1,1,1,2), ncol=3)
evD <- eigen(Sigma1,symmetric=TRUE)
Delta.mat <- diag(evD$values)
P <- evD$vectors
Q <- P%*%sqrt(Delta.mat)%*%t(P)
n <- 100
d <- 3
Z <- matrix(rnorm(n*d),nrow=n)
J <- matrix(1,nrow=n,ncol=1)
mu <- c(0,0,0)
X <- Z%*%Q+J%*%t(mu)
apply(X,2,mean)
Sigma1 <- matrix(c(2,1,1,1,2,1,1,1,2), ncol=3)
evD <- eigen(Sigma1,symmetric=TRUE)
Delta.mat <- diag(evD$values)
P <- evD$vectors
Q <- P%*%sqrt(Delta.mat)%*%t(P)
n <- 100
d <- 3
Z <- matrix(rnorm(n*d),nrow=n)
J <- matrix(1,nrow=n,ncol=1)
mu <- c(0,0,0)
X <- Z%*%Q+J%*%t(mu)
apply(X,2,mean)
cov(X)
chol.res <- chol(Sigma1)
chol.res
Sigma1 <- matrix(c(2,1,1,1,2,1,1,1,2))
n <- 1000
d <- 3
Z <- matrix(rnorm(n*d),nrow=n)
J <- matrix(1,nrow=n,ncol=1)
mu <- c(0,0,0)
Q <- chol(Sigma1)
Sigma1 <- matrix(c(2,1,1,1,2,1,1,1,2),ncol=3)
n <- 1000
d <- 3
Z <- matrix(rnorm(n*d),nrow=n)
J <- matrix(1,nrow=n,ncol=1)
mu <- c(0,0,0)
Q <- chol(Sigma1)
X2 <- Z%*%Q+J%*%t(mu)
apply(X2,2,mean)
cov(X2)
devtools::create("simpleEnsembleGroup19")
devtools::document()
rlang::last_trace()
setwd("~/simpleEnsembleGroup19")
devtools::document()
rfnews()
rfNews()
setwd("/Users/chaeeunshin/Desktop/AMS 597 Group Project")
BinData <- read.csv("BinaryData.csv")
usethis::use_data(BinData)
devtools::create("simpleEnsembleGroup19")
# ' @export
load_mat <- function(infile) {
in.dt <- dadta.table::fread(infile,header=TRUE)
in.dt <- in.dt[!duplicated(in.dt[,1]),]
in.mat <- as.matrix(in.dt[,-1,with=FALSE])
rownames(in.mat) <- unlist(in.dt[,1,with=FALSE])
in.mat
}
#' @export
load_mat <- function(infile) {
in.dt <- dadta.table::fread(infile,header=TRUE)
in.dt <- in.dt[!duplicated(in.dt[,1]),]
in.mat <- as.matrix(in.dt[,-1,with=FALSE])
rownames(in.mat) <- unlist(in.dt[,1,with=FALSE])
in.mat
}
devtools::document()
#' @export
load_mat <- function(infile) {
in.dt <- dadta.table::fread(infile,header=TRUE)
in.dt <- in.dt[!duplicated(in.dt[,1]),]
in.mat <- as.matrix(in.dt[,-1,with=FALSE])
rownames(in.mat) <- unlist(in.dt[,1,with=FALSE])
in.mat
}
floor(unique(c(1,2,4,5,2,5,2)))
unique(c(1,2,4,5,2,5,2))
all(floor(unique(c(1,2,3,5,6,4,2,4))))
x <- c(1,2,4,6,2,4,6,8,4,76,24,96,2,3,54,12,23,25,47)
unique(x)
all(floor(unique(x)))
all(unique(x))
all(x)
#' @export
#' This function is to determine whether the response variable is binary or continuous
isBinary <- function(y) {
uniq_y <- unique(y)
if(length(uniq_y)==2 && all(uniq_y %in% c(0,1))) {
return(TRUE)
}
else
return(FALSE)
}
lregression <- function(x,y) {
if(isBinary(y)==TRUE) {
logfit <- lm(y~x, family="binomial")
return(summary(logfit))
}
if(isBinary(x)==FALSE) {
linfit <- lm(y~x)
return(summary(linfit))
}
}
lregression <- function(x,y) {
if(isBinary(y)==TRUE) {
logfit <- lm(y~x, family="binomial")
return(summary(logfit))
}
if(isBinary(y)==FALSE) {
linfit <- lm(y~x)
return(summary(linfit))
}
}
ridgereg <- function(x,y) {
if(isBinary(y)==TRUE) {
ridgefit <- cv.glmnet(x,y,alpha=0,family="binomial")
}
if(isBinary(y)==FALSE) {
ridgefit <- cv.glmnet(x,y,alpha=0)
}
return(summary(ridgefit))
}
#' @export
lassoreg <- function(x,y) {
if(isBinary(y)==TRUE) {
lassofit <- cv.glmnet(x,y,alpha=1,family="binomial")
}
if(isBinary(y)=FALSE) {
#' @export
cvmodel <- function(x,y) {
if(isBinary(y)==TRUE) {
cvfit <- cv.glmnet(x,y,alpha=0.5,family="binomial")
}
if(isBinary(y)==FALSE) {
cvfit <- cv.glmnet(x,y,alpha=0.5)
}
return(summary(cvfit))
}
#' @export
library(randomForest)
randomforst <- function(x,y) {
rfmodel <- randomForest(x,y)
return(summary(rfmodel))
}
library(glmnet)
library(MASS)
data(Boston)
string(Boston)
str(Boston)
contdata <- Boston
system.file("condata",package="simpleEnesmbleGroup19")
data(contdata)
system.file("bindata","BinaryData.csv",package="simppleEnsembleGroup19")
isBinary(contdata)
bindata <- read.csv("BinaryData.csv")
isBinary(bindata)
View(bindata)
unique(bindata$y)
length(unique(bindata))
length(unique(bindata$y))
all(unique(bindata$y)%in%c(0,1))
isBinary(bindata)
#' @export
#' This function is to determine whether the response variable is binary or continuous
isBinary <- function(y) {
uniq_y <- unique(y)
if(length(uniq_y)==2 && all(uniq_y %in% c(0,1))) {
return(TRUE)
}
else if(length(uniq_y)>2) {
return(FALSE)
}
}
isBinary(bindata)
isBinary(bindata$y)
#' @export
#' This function is to determine whether the response variable is binary or continuous
isBinary <- function(y) {
uniq_y <- unique(y)
if(length(uniq_y)==2 && all(uniq_y %in% c(0,1))) {
return(TRUE)
}
else {
return(FALSE)
}
}
isBinary(bindata$y)
isBinary(contdata$medv)
bin.y <- bindata[bindata$y]
View(bin.y)
bin.y <- bindata[bindata$y,]
bin.y <- bindata[,bindata$y]
bin.y <- bindata$y
bin.x <- bindata[-bindata$y,]
View(bin.x)
bin.x <- bindata[,-bindata$y]
bin.x <- as.matrix(bindata[,-y])
bin.x <- bindata[,-bindata$y]
View(bin.x)
View(bin.x)
View(bindata)
bindata[,13]
bin.x <- bindata[,-13]
View(bin.x)
con.y <- contdata$medv
View(contdata)
contdata[,14]
con.y <- contdata[,-14]
as.matrix(con.y)
con.x <- contdata[,-14]
con.y <- contdata$medv
con.x <- as.matrix(con.x)
bin.x <- as.matrix(bin.x)
lregression(con.x,con.y)
lregression(bin.x,bin.y)
lassoreg(con.x,con.y)
